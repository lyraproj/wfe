// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fsm/fsmpb/fsm.proto

/*
Package fsmpb is a generated protocol buffer package.

It is generated from these files:
	fsm/fsmpb/fsm.proto

It has these top-level messages:
	ActorRequest
	ActorResponse
	ActionInvocation
	Parameter
	Action
*/
package fsmpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import puppet_datapb "github.com/puppetlabs/data-protobuf/datapb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ActorRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ActorRequest) Reset()                    { *m = ActorRequest{} }
func (m *ActorRequest) String() string            { return proto.CompactTextString(m) }
func (*ActorRequest) ProtoMessage()               {}
func (*ActorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ActorRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ActorResponse struct {
	Actions []*Action `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (m *ActorResponse) Reset()                    { *m = ActorResponse{} }
func (m *ActorResponse) String() string            { return proto.CompactTextString(m) }
func (*ActorResponse) ProtoMessage()               {}
func (*ActorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ActorResponse) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type ActionInvocation struct {
	Id        int64                   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Arguments *puppet_datapb.DataHash `protobuf:"bytes,2,opt,name=arguments" json:"arguments,omitempty"`
}

func (m *ActionInvocation) Reset()                    { *m = ActionInvocation{} }
func (m *ActionInvocation) String() string            { return proto.CompactTextString(m) }
func (*ActionInvocation) ProtoMessage()               {}
func (*ActionInvocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ActionInvocation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActionInvocation) GetArguments() *puppet_datapb.DataHash {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type Parameter struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Parameter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Action struct {
	Id       int64        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Consumes []*Parameter `protobuf:"bytes,3,rep,name=consumes" json:"consumes,omitempty"`
	Produces []*Parameter `protobuf:"bytes,4,rep,name=produces" json:"produces,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Action) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Action) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Action) GetConsumes() []*Parameter {
	if m != nil {
		return m.Consumes
	}
	return nil
}

func (m *Action) GetProduces() []*Parameter {
	if m != nil {
		return m.Produces
	}
	return nil
}

func init() {
	proto.RegisterType((*ActorRequest)(nil), "puppet.fsm.ActorRequest")
	proto.RegisterType((*ActorResponse)(nil), "puppet.fsm.ActorResponse")
	proto.RegisterType((*ActionInvocation)(nil), "puppet.fsm.ActionInvocation")
	proto.RegisterType((*Parameter)(nil), "puppet.fsm.Parameter")
	proto.RegisterType((*Action)(nil), "puppet.fsm.Action")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Actor service

type ActorClient interface {
	GetActor(ctx context.Context, in *ActorRequest, opts ...grpc.CallOption) (*ActorResponse, error)
	InvokeAction(ctx context.Context, in *ActionInvocation, opts ...grpc.CallOption) (*puppet_datapb.DataHash, error)
}

type actorClient struct {
	cc *grpc.ClientConn
}

func NewActorClient(cc *grpc.ClientConn) ActorClient {
	return &actorClient{cc}
}

func (c *actorClient) GetActor(ctx context.Context, in *ActorRequest, opts ...grpc.CallOption) (*ActorResponse, error) {
	out := new(ActorResponse)
	err := grpc.Invoke(ctx, "/puppet.fsm.Actor/GetActor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorClient) InvokeAction(ctx context.Context, in *ActionInvocation, opts ...grpc.CallOption) (*puppet_datapb.DataHash, error) {
	out := new(puppet_datapb.DataHash)
	err := grpc.Invoke(ctx, "/puppet.fsm.Actor/InvokeAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Actor service

type ActorServer interface {
	GetActor(context.Context, *ActorRequest) (*ActorResponse, error)
	InvokeAction(context.Context, *ActionInvocation) (*puppet_datapb.DataHash, error)
}

func RegisterActorServer(s *grpc.Server, srv ActorServer) {
	s.RegisterService(&_Actor_serviceDesc, srv)
}

func _Actor_GetActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).GetActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puppet.fsm.Actor/GetActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).GetActor(ctx, req.(*ActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actor_InvokeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionInvocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServer).InvokeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puppet.fsm.Actor/InvokeAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServer).InvokeAction(ctx, req.(*ActionInvocation))
	}
	return interceptor(ctx, in, info, handler)
}

var _Actor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "puppet.fsm.Actor",
	HandlerType: (*ActorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActor",
			Handler:    _Actor_GetActor_Handler,
		},
		{
			MethodName: "InvokeAction",
			Handler:    _Actor_InvokeAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fsm/fsmpb/fsm.proto",
}

func init() { proto.RegisterFile("fsm/fsmpb/fsm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0xa5, 0x85, 0x8f, 0x8f, 0x0e, 0x68, 0x74, 0x8d, 0xb1, 0x12, 0x0f, 0x64, 0x4f, 0x1c, 0xa4,
	0x8d, 0x10, 0x8f, 0x1e, 0x30, 0x26, 0xe8, 0xcd, 0xf4, 0xa6, 0xb7, 0x6d, 0xbb, 0x85, 0x46, 0xb7,
	0xbb, 0x76, 0x77, 0x4d, 0xfc, 0x1b, 0xfa, 0x87, 0x4d, 0x77, 0x69, 0x21, 0x82, 0x5e, 0xda, 0xc9,
	0xcc, 0xdb, 0x99, 0x37, 0xef, 0x0d, 0x9c, 0x64, 0x92, 0x85, 0x99, 0x64, 0x22, 0xae, 0xbe, 0x81,
	0x28, 0xb9, 0xe2, 0x08, 0x84, 0x16, 0x82, 0xaa, 0x20, 0x93, 0x6c, 0x78, 0x9c, 0x12, 0x45, 0x44,
	0x1c, 0x56, 0x3f, 0x5b, 0xc6, 0x18, 0x06, 0xf3, 0x44, 0xf1, 0x32, 0xa2, 0x6f, 0x9a, 0x4a, 0x85,
	0x10, 0x74, 0x0a, 0xc2, 0xa8, 0xef, 0x8c, 0x9c, 0xb1, 0x17, 0x99, 0x18, 0xdf, 0xc0, 0xc1, 0x1a,
	0x23, 0x05, 0x2f, 0x24, 0x45, 0x97, 0xf0, 0x9f, 0x24, 0x2a, 0xe7, 0x85, 0xf4, 0x9d, 0x51, 0x7b,
	0xdc, 0x9f, 0xa2, 0x60, 0x33, 0x25, 0x98, 0x9b, 0x52, 0x54, 0x43, 0xf0, 0x13, 0x1c, 0xd9, 0xd4,
	0x43, 0xf1, 0xce, 0x13, 0x52, 0x45, 0xe8, 0x10, 0xdc, 0x3c, 0x35, 0x43, 0xda, 0x91, 0x9b, 0xa7,
	0xe8, 0x1a, 0x3c, 0x52, 0x2e, 0x35, 0xa3, 0x85, 0x92, 0xbe, 0x3b, 0x72, 0xc6, 0xfd, 0xe9, 0x59,
	0xdd, 0xd3, 0x92, 0x0e, 0xee, 0x88, 0x22, 0xf7, 0x44, 0xae, 0xa2, 0x0d, 0x12, 0xcf, 0xc0, 0x7b,
	0x24, 0x25, 0x61, 0x54, 0xd1, 0x72, 0x1f, 0xf5, 0x2a, 0xa7, 0x3e, 0x04, 0x35, 0x2d, 0xbd, 0xc8,
	0xc4, 0xf8, 0xd3, 0x81, 0xae, 0x25, 0xb4, 0x43, 0xa3, 0x6e, 0xe1, 0x6e, 0xb5, 0xb8, 0x82, 0x5e,
	0xc2, 0x0b, 0xa9, 0x19, 0x95, 0x7e, 0xdb, 0x6c, 0x7b, 0xba, 0xbd, 0x6d, 0x33, 0x3f, 0x6a, 0x60,
	0xd5, 0x13, 0x51, 0xf2, 0x54, 0x27, 0x54, 0xfa, 0x9d, 0x3f, 0x9f, 0xd4, 0xb0, 0xe9, 0x97, 0x03,
	0xff, 0x8c, 0xc8, 0x68, 0x0e, 0xbd, 0x05, 0x55, 0x36, 0xf6, 0x7f, 0xe8, 0xda, 0xf8, 0x34, 0x3c,
	0xdf, 0x53, 0xb1, 0xee, 0xe0, 0x16, 0x5a, 0xc0, 0xa0, 0xd2, 0xfa, 0x85, 0xae, 0xd7, 0xbc, 0xd8,
	0xb5, 0x67, 0xe3, 0xc5, 0xf0, 0x37, 0xa1, 0x71, 0xeb, 0x36, 0x7c, 0x9e, 0x2c, 0x73, 0xb5, 0xd2,
	0x71, 0x90, 0x70, 0x16, 0x5a, 0xd8, 0x2b, 0x89, 0xa5, 0xb9, 0xa0, 0x89, 0xb9, 0xa0, 0x58, 0x67,
	0x61, 0x73, 0x77, 0x71, 0xd7, 0xe4, 0x66, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x19, 0x12, 0x7c,
	0x09, 0x8b, 0x02, 0x00, 0x00,
}
